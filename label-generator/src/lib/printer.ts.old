import { Label } from '@/types';

export interface PrintOptions {
  paperSize?: string;
  orientation?: 'portrait' | 'landscape';
  margins?: {
    top: number;
    right: number;
    bottom: number;
    left: number;
  };
}

export class ThermalPrinter {
  private static instance: ThermalPrinter;

  private constructor() {}

  public static getInstance(): ThermalPrinter {
    if (!ThermalPrinter.instance) {
      ThermalPrinter.instance = new ThermalPrinter();
    }
    return ThermalPrinter.instance;
  }

  public async printLabels(
    labels: Label[],
    options: PrintOptions = {}
  ): Promise<void> {
    try {
      // Crear un contenedor para todas las etiquetas
      const printContainer = this.createPrintContainer(labels);
      
      // Configurar opciones de impresión
      const printOptions: PrintOptions = {
        paperSize: 'A4',
        orientation: 'portrait',
        margins: { top: 0, right: 0, bottom: 0, left: 0 },
        ...options
      };

      // Usar la API de impresión del navegador
      await this.printWithBrowser(printContainer, printOptions);
      
    } catch (error) {
      console.error('Error durante la impresión:', error);
      throw new Error(`Falló la impresión: ${error}`);
    }
  }

  private createPrintContainer(labels: Label[]): HTMLElement {
    const container = document.createElement('div');
    container.style.cssText = `
      width: 100%;
      height: 100%;
      margin: 0;
      padding: 0;
      background: white;
      display: flex;
      flex-wrap: wrap;
      align-content: flex-start;
    `;

    labels.forEach(label => {
      const labelElement = this.createLabelElement(label);
      container.appendChild(labelElement);
    });

    return container;
  }

  private createLabelElement(label: Label): HTMLElement {
    const labelDiv = document.createElement('div');
    labelDiv.style.cssText = `
      width: 80mm;
      height: 60mm;
      margin: 1mm;
      padding: 2mm;
      border: 1px dashed #ccc;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      font-family: Arial, sans-serif;
      font-size: 12px;
      background: white;
      page-break-inside: avoid;
    `;

    // Logo/Marca
    const brandDiv = document.createElement('div');
    brandDiv.style.cssText = `
      font-weight: bold;
      font-size: 14px;
      margin-bottom: 5mm;
      text-align: center;
    `;
    brandDiv.textContent = this.getBrandFromType(label.type);

    // Código principal
    const codeDiv = document.createElement('div');
    codeDiv.style.cssText = `
      font-size: 18px;
      font-weight: bold;
      margin-bottom: 3mm;
      text-align: center;
    `;
    codeDiv.textContent = label.code;

    // Tipo de producto
    const typeDiv = document.createElement('div');
    typeDiv.style.cssText = `
      font-size: 10px;
      color: #666;
      text-align: center;
    `;
    typeDiv.textContent = label.type;

    labelDiv.appendChild(brandDiv);
    labelDiv.appendChild(codeDiv);
    labelDiv.appendChild(typeDiv);

    return labelDiv;
  }

  private getBrandFromType(type: string): string {
    if (type.includes('RIMPORT')) return 'RIMPORT';
    if (type.includes('COENTEL')) return 'COENTEL';
    return 'EFO';
  }

  private async printWithBrowser(
    container: HTMLElement,
    options: PrintOptions
  ): Promise<void> {
    return new Promise((resolve, reject) => {
      // Crear un iframe oculto para la impresión
      const iframe = document.createElement('iframe');
      iframe.style.cssText = `
        position: absolute;
        width: 0;
        height: 0;
        border: none;
        visibility: hidden;
      `;

      document.body.appendChild(iframe);

      try {
        const iframeDoc = iframe.contentDocument || iframe.contentWindow?.document;
        if (!iframeDoc) {
          throw new Error('No se pudo acceder al documento del iframe');
        }

        // Configurar el documento del iframe
        iframeDoc.open();
        iframeDoc.write(`
          <!DOCTYPE html>
          <html>
            <head>
              <title>EFO Label Print</title>
              <style>
                @page {
                  margin: ${options.margins?.top}mm ${options.margins?.right}mm ${options.margins?.bottom}mm ${options.margins?.left}mm;
                  size: ${options.paperSize};
                }
                
                @media print {
                  body {
                    margin: 0;
                    padding: 0;
                    background: white !important;
                    -webkit-print-color-adjust: exact;
                    color-adjust: exact;
                  }
                  
                  .no-print {
                    display: none !important;
                  }
                }
                
                body {
                  margin: 0;
                  padding: 0;
                  font-family: Arial, sans-serif;
                  background: white;
                }
              </style>
            </head>
            <body>
              ${container.outerHTML}
            </body>
          </html>
        `);
        iframeDoc.close();

        // Esperar a que el contenido se cargue
        iframe.onload = () => {
          setTimeout(() => {
            try {
              // Ejecutar la impresión
              iframe.contentWindow?.print();
              
              // Limpiar el iframe después de un breve delay
              setTimeout(() => {
                document.body.removeChild(iframe);
                resolve();
              }, 1000);
              
            } catch (printError) {
              document.body.removeChild(iframe);
              reject(printError);
            }
          }, 500);
        };

      } catch (error) {
        document.body.removeChild(iframe);
        reject(error);
      }
    });
  }

  public async printPreview(labels: Label[]): Promise<string> {
    const container = this.createPrintContainer(labels);
    return container.outerHTML;
  }
}

export const thermalPrinter = ThermalPrinter.getInstance();